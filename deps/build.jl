using BinaryProvider # requires BinaryProvider 0.3.0 or later

# First of all, install FFWT
fftwbuilder = joinpath(@__DIR__, "build_fftw.jl")
run(`$(Base.julia_cmd()) $(fftwbuilder)`)

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfinufft"], :libfinufft),
]

verbose = true

# Download binaries from hosted location
bin_prefix = "https://github.com/ludvigak/FINUFFTBuilder/releases/download/0.1.4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.aarch64-linux-gnu.tar.gz", "e5f41064bfffb9b57b68b86b71f455ce5749d133148b38426563fb5dfe82d967"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.aarch64-linux-musl.tar.gz", "9e8a540ff78f7c8a4b408e3ccb8ba17510098c810f2cf8917a7fea888d9eb9c0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.arm-linux-gnueabihf.tar.gz", "78c622d1a4e62e80fee7e0479be7d5b3a8d378cc3a93c1561f1faa0f65a12948"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.arm-linux-musleabihf.tar.gz", "e7961f557dca9234e2089e3cc76e2aee96885e5a5f93c25c6e94d157fbaa22af"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.i686-linux-gnu.tar.gz", "40bf6cc262d4ca7ec0e6c1ec14404f9679c8f1fe393c98f5b3547c68a11740d8"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.i686-linux-musl.tar.gz", "7e47d36ea34638e3aea5d1efc6342e42ec421564f4abb3cfd5da3e42dc9210dd"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.powerpc64le-linux-gnu.tar.gz", "fdd202860e679ac0180deadb9c211b786686b5c8cf434ff6cd2774f19e7294af"),
    MacOS(:x86_64) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.x86_64-apple-darwin14.tar.gz", "da5eeca4de4ccbf6b9d2dd9ae62a7ffe1b20a735d0cd91ecedf530020fd327ed"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.x86_64-linux-gnu.tar.gz", "ce8f7f8503afb1b682001c82cce5eaf7a73e71ef2a04d62febad4c0693540f4b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.x86_64-linux-musl.tar.gz", "90c9f9c7d1b6490d1d9e40d43d44337593d11ab6a022bfe265be4873a2e65e9e"),
    FreeBSD(:x86_64) => ("$bin_prefix/FINUFFTBuilder.v0.1.4.x86_64-unknown-freebsd11.1.tar.gz", "ed46ac3fe2de028ad5e76e419f543fb312ff0b7ca057664906ad03fafca850f4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

@show readdir(joinpath("usr","lib"))
using Libdl
if Sys.KERNEL == :Darwin
    dlopen("usr/lib/libfinufft.dylib")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
