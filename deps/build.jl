using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfinufft"], :libfinufft),
]

verbose = true

# Download binaries from hosted location
bin_prefix = "https://github.com/ludvigak/FINUFFTBuilder/releases/download/0.1.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.aarch64-linux-gnu.tar.gz", "acfafddec577c21a83e8b07148f66869b6ca64fc7001f05dec6580ebe68e3485"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.aarch64-linux-musl.tar.gz", "dcf150274207fa105d26a9f4aab2dab0244105c7e13b16947fa469f6c3eac9c2"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.arm-linux-gnueabihf.tar.gz", "34f8893d269d14ccecfbf28479ffb4b43a97ccbdea1f10bbf46960b4646ec995"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.arm-linux-musleabihf.tar.gz", "2a4798841219f459f061acd94d04ea12448c18c085515b871f8f42ed02e40ab5"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.i686-linux-gnu.tar.gz", "8107e67a45b811eb8a6a673726732b0cbad5547e7cd5ae8ded752fb813ea2d36"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.i686-linux-musl.tar.gz", "35b9badc8983e044e76bef51a6a1ae12bda660b085fa7ffe042d52670d6f0599"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.powerpc64le-linux-gnu.tar.gz", "94f50312b7b3a8f71aeb039e3b7da7899a96ad62221d3a262fd5a1b42c589ea6"),
    MacOS(:x86_64) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.x86_64-apple-darwin14.tar.gz", "8733944830cae7ff1523ee6026c093b590ca75700c5214883384bd9c462ba1c1"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.x86_64-linux-gnu.tar.gz", "2974ef81b08c48e5451c33408aee156ddd4039d3381832f7d8ec1c84d825e29f"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.x86_64-linux-musl.tar.gz", "182296abbeac73baecac1f80dc22191b0d0a876256e7ad6bcbe4c83f2825188c"),
    FreeBSD(:x86_64) => ("$bin_prefix/FINUFFTBuilder.v0.1.2.x86_64-unknown-freebsd11.1.tar.gz", "4a6f7c6927e4a6526ee7e70c6078427589ac2288c937152e33cce45d68247556"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

@show readdir(joinpath(@__DIR__, "usr", "lib"))
@show platform_key_abi()
@show satisfied(products[1]; verbose=verbose)

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
